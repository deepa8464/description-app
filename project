
from dotenv import load_dotenv
load_dotenv()
# app.py (using Flask for a simple web interface)
from flask import Flask, render_template, request
import google.generativeai as genai
import os
import streamlit as st

app = Flask(__name__)

# Configure your Gemini API key (replace with your actual API key)
genai.configure(api_key=os.getenv("AIzaSyBAO6F4S5d7JTvf_AP-z45Au-clkP_Ykso"))  # Use environment variables for security

# Initialize the Gemini Pro Vision model
model = genai.GenerativeModel('gemini-pro-vision')

def generate_landmark_description(image_path):
    """Generates a description of a landmark from an image."""
    try:
        img = genai.Part.from_data(data=open(image_path, 'rb').read(), mime_type="image/jpeg") #assumes jpeg. adapt as needed.
        prompt_parts = [
            img,
            "Describe this landmark in detail. Focus on its history, architectural style, and any interesting facts. Provide a description suitable for a tourist."
        ]
        response = model.generate_content(prompt_parts)
        return response.text
    except Exception as e:
        return f"Error: {e}"

@app.route('/', methods=['GET', 'POST'])
def index():
    """Handles image uploads and displays the description."""
    if request.method == 'POST':
        if 'image' not in request.files:
            return render_template('index.html', error='No image uploaded')

        image = request.files['image']

        if image.filename == '':
            return render_template('index.html', error='No image selected')

        if image:
            image_path = "uploaded_image.jpg"  # Save the image temporarily
            image.save(image_path)
            description = generate_landmark_description(image_path)
            os.remove(image_path) #clean up
            return render_template('index.html', description=description)

    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True, port=5001)  # Use port 5001 instead)
    
